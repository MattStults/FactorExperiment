// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  $.widget("stults.decoration", {
    options: {
      element: null,
      elementId: "board",
      svg: null
    },
    _setOption: function(key, value) {
      if (key === 'element') {
        this.isBuilt = false;
      }
      return this._super(key, value);
    },
    _setOptions: function(options) {
      this._super(options);
      return this.refresh();
    },
    _build: function() {},
    refresh: function() {
      if (!(this.options.svg != null)) {
        this.options.svg = this.element.svg('get');
      }
      if (!(this.isBuilt != null) || !this.isBuilt) {
        this.isBuilt = true;
        return this._build();
      }
    },
    _create: function() {
      this.element.addClass("decoration");
      if (!(this.options.svg != null)) {
        this.element.svg();
      }
      return this.refresh();
    }
  });

  $.widget("stults.gridHover", $.stults.decoration, {
    options: {
      lhs: null,
      rhs: null,
      statusTags: ["on", "off"]
    },
    _buildLine: function(group, positions) {
      var first, last, mid, _i;
      first = positions[0], mid = 3 <= positions.length ? __slice.call(positions, 1, _i = positions.length - 1) : (_i = 1, []), last = positions[_i++];
      return this.options.svg.line(group, first.x, first.y, last.x, last.y);
    },
    getChildren: function() {
      return $("#" + this.options.elementId).children();
    },
    _getGridPositions: function(hexes, size) {
      var cols, i, j, pos, rows, _i, _j, _k;
      rows = [];
      cols = [];
      for (i = _i = 0; 0 <= size ? _i < size : _i > size; i = 0 <= size ? ++_i : --_i) {
        rows[i] = [];
        cols[i] = [];
      }
      for (i = _j = 0; 0 <= size ? _j < size : _j > size; i = 0 <= size ? ++_j : --_j) {
        for (j = _k = 0; 0 <= size ? _k < size : _k > size; j = 0 <= size ? ++_k : --_k) {
          pos = util.getElemCenter(hexes.filter($(".x" + i)).filter($(".y" + j))[0]);
          rows[i][j] = pos;
          cols[j][i] = pos;
        }
      }
      return [rows, cols];
    },
    _setupLines: function(grid) {
      var col, cols, hexes, i, lhs, lineGroup, rhs, row, rows, size, _i, _j, _k, _len, _len1, _ref, _results;
      hexes = this.options.element.hexGrid("getChildren");
      size = this.options.element.hexGrid("option", "size");
      _ref = this._getGridPositions(hexes, size), rows = _ref[0], cols = _ref[1];
      lineGroup = this.options.svg.group(null, this.options.elementId);
      lhs = this.options.lhs.hexLine("getChildren");
      rhs = this.options.rhs.hexLine("getChildren");
      for (i = _i = 0; 0 <= size ? _i < size : _i > size; i = 0 <= size ? ++_i : --_i) {
        cols[i] = [util.getElemCenter(rhs.filter($(".row" + i))[0])].concat(cols[i]);
        rows[i] = [util.getElemCenter(lhs.filter($(".row" + i))[0])].concat(rows[i]);
      }
      for (i = _j = 0, _len = rows.length; _j < _len; i = ++_j) {
        row = rows[i];
        $(this._buildLine(lineGroup, row)).addClass("x" + i);
      }
      _results = [];
      for (i = _k = 0, _len1 = cols.length; _k < _len1; i = ++_k) {
        col = cols[i];
        _results.push($(this._buildLine(lineGroup, col)).addClass("y" + i));
      }
      return _results;
    },
    _isTurnOn: function(tags) {
      var x, xBit, y, yBit;
      x = this.options.lhs.hexLine("option", "value");
      y = this.options.rhs.hexLine("option", "value");
      xBit = 1 << tags.x;
      yBit = 1 << tags.y;
      return [(x & xBit) === 0 || (y & yBit) === 0, x, xBit, y, yBit];
    },
    _getStatusClass: function(tags) {
      if (this._isTurnOn(tags)[0]) {
        return this.options.statusTags[0];
      } else {
        return this.options.statusTags[1];
      }
    },
    _removeHover: function(tags) {
      var toRemove, _ref, _ref1, _ref2;
      toRemove = ["hover", "hoverX", "hoverY"].concat(this.options.statusTags);
      (_ref = this.options.element).hexGrid.apply(_ref, ["clearClass"].concat(__slice.call(toRemove)));
      (_ref1 = this.options.lhs).hexLine.apply(_ref1, ["clearClass"].concat(__slice.call(toRemove)));
      (_ref2 = this.options.rhs).hexLine.apply(_ref2, ["clearClass"].concat(__slice.call(toRemove)));
      return this.getChildren().removeClass("hover");
    },
    _addHover: function(tags) {
      var lines, status;
      status = this._getStatusClass(tags);
      this.options.element.hexGrid("setClass", "x", tags.x, "hoverX", status);
      this.options.element.hexGrid("setClass", "y", tags.y, "hoverY", status);
      this.options.lhs.hexLine("setClass", "row", tags.x, "hover", status);
      this.options.rhs.hexLine("setClass", "row", tags.y, "hover", status);
      lines = this.getChildren();
      lines.filter($(".x" + tags.x)).addClass("hover");
      return lines.filter($(".y" + tags.y)).addClass("hover");
    },
    _select: function(tags) {
      var isTurnOn, x, xBit, y, yBit, _ref;
      this._removeHover(tags);
      _ref = this._isTurnOn(tags), isTurnOn = _ref[0], x = _ref[1], xBit = _ref[2], y = _ref[3], yBit = _ref[4];
      if (isTurnOn) {
        x |= xBit;
        y |= yBit;
      } else {
        x &= ~xBit;
        y &= ~yBit;
      }
      this.options.lhs.hexLine("option", "value", x);
      this.options.rhs.hexLine("option", "value", y);
      return this._addHover(tags);
    },
    _build: function() {
      var that;
      that = this;
      this.options.element.hexGrid('addCallback', 'mouseenter', function(event, tags) {
        return that._addHover(tags);
      });
      this.options.element.hexGrid('addCallback', 'mouseleave', function(event, tags) {
        return that._removeHover(tags);
      });
      this.options.element.hexGrid('addCallback', 'click', function(event, tags) {
        return that._select(tags);
      });
      return this._setupLines();
    }
  });

  $.widget("stults.decorationBox", $.stults.decoration, {
    options: {
      title: "",
      value: 0,
      textOffset: [0, -20],
      lineOffset: [5, 5]
    },
    _setOption: function(key, value) {
      if (key === 'element') {
        this.isBuilt = false;
      }
      return this._super(key, value);
    },
    _setOptions: function(options) {
      this._super(options);
      return this.refresh();
    },
    _build: function() {
      var base, bound, _ref;
      base = (_ref = this.options.element) != null ? _ref.boxLine("getGroup") : void 0;
      if (!(base != null)) {
        return false;
      }
      if (this.rootGroup != null) {
        this.options.svg.remove(this.rootGroup);
      }
      bound = base.getBBox();
      this.rootGroup = this.options.svg.group(base, this.options.elementId);
      $(this.rootGroup).addClass("decoration");
      return this.text = util.drawTextAtPoint(this.options.svg, this.rootGroup, [bound.x + bound.width / 2 + this.options.textOffset[0], bound.y + this.options.textOffset[1]], this.options.title + ": " + this.options.value);
    },
    refresh: function() {
      this._super('refresh');
      if (this.text != null) {
        return this.text.text(this.options.title + ": " + this.options.value);
      }
    }
  });

}).call(this);
